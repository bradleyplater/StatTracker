generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model players {
  id                                                 Int            @id @default(autoincrement())
  shooting_side                                      Int?
  userid                                             String?
  firstName                                          String?
  surname                                            String?
  shooting_side_players_shooting_sideToshooting_side shooting_side? @relation("players_shooting_sideToshooting_side", fields: [shooting_side], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_shooting_side")
  user                                               User?          @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_userid")
}

model sessions {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @db.VarChar(255)
}

model shooting_side {
  id                                           Int       @id
  side                                         String    @unique @db.VarChar(255)
  players_players_shooting_sideToshooting_side players[] @relation("players_shooting_sideToshooting_side")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  players       players[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
